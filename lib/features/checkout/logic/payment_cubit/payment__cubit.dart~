import 'package:bloc/bloc.dart';
import 'package:book_mart/core/constants/payment_keys.dart';
import 'package:book_mart/core/di/dependency_injection.dart';
import 'package:book_mart/core/netwoking/api_error_model.dart';
import 'package:book_mart/core/netwoking/payment_api_services/paymob_api_services/paymob_api_service.dart';
import 'package:book_mart/core/netwoking/payment_api_services/stripe_api_service/stripe_api_service.dart';
import 'package:book_mart/core/payment/model/payment_input_model.dart';
import 'package:book_mart/core/payment/model/stribe_payment_intent_input_model.dart';
import 'package:book_mart/core/payment/payments_gateways/paymob/paymop_service.dart';
import 'package:book_mart/core/payment/payments_gateways/stripe/stripe_service.dart';
import 'package:book_mart/features/checkout/date/model/place_order_request_body.dart';
import 'package:book_mart/features/checkout/date/repo/checkout_repo.dart';
import 'package:book_mart/features/checkout/logic/checkout_cubit/checkout_cubit.dart';
import 'package:flutter/material.dart';
import 'package:multi_payment_gateway/services/paypal_service.dart';
import 'package:multi_payment_gateway/transaction.dart';
part 'payment__state.dart';

class PaymentCubit extends Cubit<PaymentState> {
  final CheckoutRepo checkoutRepo;
  final CheckoutCubit checkoutCubit;

  PaymentCubit({required this.checkoutRepo, required this.checkoutCubit})
      : super(PaymentInitial());

  Future<void> pay({
    required PaymentService service,
    required PaymentInput input,
  }) async {
    emit(PaymentLoading());
    final result = await service.pay(input);
    if (result.isSuccess) {
      emit(PaymentSuccess(result.paymentKey!));
    } else {
      emit(PaymentFailure(result.error!));
    }
  }
  Future<void> placeOrder() async {
    emit(PlaceOrderLoading());
    PlaceOrderRequestBody placeOrderRequestBody = PlaceOrderRequestBody(
      address: checkoutCubit.addressController.text,
      email: checkoutCubit.emailController.text,
      name: checkoutCubit.nameController.text,
      phone: checkoutCubit.phoneController.text,
      governorateId: '1',
    );
    var result = await checkoutRepo.placeOrder(placeOrderRequestBody);
    result.when(success: (data) {
      emit(PlaceOrderSuccess());
    }, failure: (error) {
      emit(PlaceOrderFailure());
    });
  }


}
